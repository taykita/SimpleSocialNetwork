<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_0.xsd" version="2.1">

    <named-native-query name="Chat.addChat">
        <query>
            INSERT INTO
                Chat
                    (NAME, TYPE, OWNER_ID)
            VALUES
                (:name, :type, :ownerId)
            RETURNING ID
        </query>
    </named-native-query>

    <named-native-query name="Chat.addUserInChat">
        <query>
            INSERT INTO
                Accounts_chat
                    (CHAT_ID, ACC_ID)
            VALUES
                (:chatId, :accId)
        </query>
    </named-native-query>

    <named-native-query name="Chat.deleteChatUser">
        <query>
            DELETE FROM
                Accounts_chat
            WHERE
                chat_id = :chatId
            AND
                acc_id = :accId
        </query>
    </named-native-query>

    <named-native-query name="Chat.addChatUser">
        <query>
            INSERT INTO
                Accounts_Chat
                    (CHAT_ID, ACC_ID)
            VALUES
                (:chatId, :accId)
        </query>
    </named-native-query>

    <named-native-query name="Chat.getChat">
        <query>
            SELECT
                c.id, c.name, c.type, c.owner_id
            FROM
                Chat as c
            WHERE
                ID = :chatId
        </query>
    </named-native-query>

    <named-native-query name="Chat.existChat">
        <query>
            SELECT
                *
            FROM
                Accounts_Chat
            WHERE
                ACC_ID = :accId
        </query>
    </named-native-query>

    <named-native-query name="Chat.addMessage">
        <query>
            INSERT INTO
                Message
                    (TEXT, DATE, CHAT_ID, ACC_ID)
            VALUES
                (:text, now(), :chatId, :accId)
            RETURNING DATE
        </query>
    </named-native-query>

    <named-native-query name="Chat.getMessages">
        <query>
            SELECT
                m.text, m.date, a.user_name, m.id
            FROM
                Message AS m
            JOIN
                Accounts_Chat AS ac
            ON
                m.chat_id = ac.chat_id
            AND
                m.acc_id = ac.acc_id
            JOIN
                Accounts AS a
            ON
                m.acc_id = a.id
            WHERE
                ac.chat_id = :chatId
            AND
                m.id &lt; :firstMessageId
            ORDER BY
                m.id
            DESC
            LIMIT :maxCount
        </query>
    </named-native-query>

    <named-native-query name="Chat.getChats">
        <query>
            SELECT
                c.id, c.name, c.owner_id, c.type
            FROM
                Accounts_Chat as ac
            JOIN
                Chat AS c
            ON
                ac.chat_id=c.id
            WHERE
                ac.acc_id=:userId
        </query>
    </named-native-query>

    <named-native-query name="Chat.getUsersEmail">
        <query>
            SELECT
                a.email
            FROM
                Accounts as a
            JOIN
                Accounts_Chat as ac
            ON
                a.id = ac.acc_id
            WHERE
                ac.chat_id = :chatId
        </query>
    </named-native-query>

    <named-native-query name="Chat.addPrivateChat">
        <query>
            INSERT INTO
                Chat
                    (NAME, TYPE, OWNER_ID)
            VALUES
                (:name, :type, :ownerId)
            RETURNING ID
        </query>
    </named-native-query>

    <named-native-query name="Chat.getPrivateChat">
        <query>
            SELECT DISTINCT
                c.id, c.name, c.type, c.owner_id
            FROM
                Accounts_Chat as ac1
            INNER JOIN
                Accounts_Chat as ac2
            ON
                ac1.chat_id = ac2.chat_id
            AND
                ac2.acc_id != :userId
            INNER JOIN
                Chat as c
            ON
                ac1.chat_id = c.id
            WHERE
                c.type = 2
            AND
                ac1.acc_id = :userId
            AND
                ac2.acc_id = :friendId
        </query>
    </named-native-query>

    <named-native-query name="Chat.existPrivateChat">
        <query>
            SELECT
                ac1.chat_id as chat1_id, ac2.chat_id as chat2_id
            FROM
                Accounts_Chat as ac1
            INNER JOIN
                Accounts_Chat as ac2
            ON
                ac1.chat_id = ac2.chat_id
            AND
                ac2.acc_id != :userId
            WHERE
                ac1.acc_id = :userId
            AND
                ac2.acc_id = :friendId
        </query>
    </named-native-query>

    <named-native-query name="Chat.getUsersFromChat">
        <query>
            SELECT
                a.id, a.email, a.pass, a.user_name
            FROM
                Accounts as a
            JOIN
                Accounts_Chat as ac
            ON
                a.id = ac.acc_id
            WHERE
                ac.chat_id = :chatId
        </query>
    </named-native-query>

<!--    TODO Подумать над исправлением бага-->

    <named-native-query name="Chat.getOtherUsersFromChat">
        <query>
            SELECT DISTINCT
                a.id, a.email, a.pass, a.user_name
            FROM
                Accounts as a
            JOIN
                Accounts_Accounts as aa
            ON
                a.id = aa.user_id
            JOIN
                Accounts_Chat as ac
            ON
                a.id = ac.acc_id
            WHERE
                ac.chat_id != :chatId
            AND
                aa.acc_id = :userId
        </query>
    </named-native-query>

    <named-native-query name="Chat.authChatUser">
        <query>
            SELECT
                a.id
            FROM
                Accounts_Chat as ac
            WHERE
                ac.chat_id = :chatId
            AND
                a.id = :accId
        </query>
    </named-native-query>

</entity-mappings>